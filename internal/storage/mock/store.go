// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sourcecd/gofermart/internal/models"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AccuPoll mocks base method.
func (m *MockStore) AccuPoll(ctx context.Context, orders *[]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccuPoll", ctx, orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccuPoll indicates an expected call of AccuPoll.
func (mr *MockStoreMockRecorder) AccuPoll(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccuPoll", reflect.TypeOf((*MockStore)(nil).AccuPoll), ctx, orders)
}

// AccuSave mocks base method.
func (m *MockStore) AccuSave(ctx context.Context, accrual []models.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccuSave", ctx, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccuSave indicates an expected call of AccuSave.
func (mr *MockStoreMockRecorder) AccuSave(ctx, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccuSave", reflect.TypeOf((*MockStore)(nil).AccuSave), ctx, accrual)
}

// AuthUser mocks base method.
func (m *MockStore) AuthUser(ctx context.Context, reg *models.User) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, reg)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockStoreMockRecorder) AuthUser(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockStore)(nil).AuthUser), ctx, reg)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(ctx context.Context, userid, orderid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userid, orderid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(ctx, userid, orderid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), ctx, userid, orderid)
}

// GetBalance mocks base method.
func (m *MockStore) GetBalance(ctx context.Context, userid int64, balance *models.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userid, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStoreMockRecorder) GetBalance(ctx, userid, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStore)(nil).GetBalance), ctx, userid, balance)
}

// GetSecKey mocks base method.
func (m *MockStore) GetSecKey(ctx context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecKey", ctx)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecKey indicates an expected call of GetSecKey.
func (mr *MockStoreMockRecorder) GetSecKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecKey", reflect.TypeOf((*MockStore)(nil).GetSecKey), ctx)
}

// InitSecKey mocks base method.
func (m *MockStore) InitSecKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSecKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSecKey indicates an expected call of InitSecKey.
func (mr *MockStoreMockRecorder) InitSecKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSecKey", reflect.TypeOf((*MockStore)(nil).InitSecKey), ctx)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(ctx context.Context, userid int64, orderList *[]models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, userid, orderList)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(ctx, userid, orderList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), ctx, userid, orderList)
}

// PopulateDB mocks base method.
func (m *MockStore) PopulateDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateDB indicates an expected call of PopulateDB.
func (mr *MockStoreMockRecorder) PopulateDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateDB", reflect.TypeOf((*MockStore)(nil).PopulateDB), ctx)
}

// RegisterUser mocks base method.
func (m *MockStore) RegisterUser(ctx context.Context, reg *models.User) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, reg)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStoreMockRecorder) RegisterUser(ctx, reg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStore)(nil).RegisterUser), ctx, reg)
}

// Withdraw mocks base method.
func (m *MockStore) Withdraw(ctx context.Context, userid int64, withdraw *models.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userid, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockStoreMockRecorder) Withdraw(ctx, userid, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockStore)(nil).Withdraw), ctx, userid, withdraw)
}

// Withdrawals mocks base method.
func (m *MockStore) Withdrawals(ctx context.Context, userid int64, withdrawals *[]models.Withdrawals) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", ctx, userid, withdrawals)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockStoreMockRecorder) Withdrawals(ctx, userid, withdrawals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockStore)(nil).Withdrawals), ctx, userid, withdrawals)
}
